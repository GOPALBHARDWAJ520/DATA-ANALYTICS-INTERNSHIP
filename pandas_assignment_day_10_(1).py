# -*- coding: utf-8 -*-
"""Pandas Assignment Day 10 (1).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14fEBtqThWMHl4UI2e1zUS5hVSiHX894O

# <center>Pandas Assignment</center>

Import pandas and numpy with their aliases
"""

import pandas as pd
import numpy as np

"""Create a variable a = pd.Series([ 100, 200, 300, 400])"""

a = pd.Series([ 100, 200, 300, 400])

"""Print a, and data type"""

a.head()

"""Using indexing access the element 300 from the series a."""

a.loc[2]

"""

```
# This is formatted as code
```

What are the values of index for series a?"""

a.index

"""Change the index to  ['c', 'a', 'b', 'd']"""

a.index = ['c', 'a', 'b', 'd']
a.index
a

"""Access the value in the series with index 'd'"""

a.loc['d']

"""Sort the values wrt to the index and print it"""

a.sort_index()

"""Create a new Pandas Series b having index as 'e', 'f', and 'g' and value 800,450,100 and print it"""

b = pd.Series([800,450,100],index=['e','f','g'])
b

"""Append b series at the end of a series"""

a =pd.concat([a,b])
a

#print a again after appending b into it


a

"""Sort the values in descending order of a and print the index of the sorted series"""

# a =

a.sort_index(ascending=False)



"""## Pandas DataFrame

### Part 1

Create a pandas dataframe df from the series 'a' that we used in the last section, print the dataframe
"""

# df =
df = pd.DataFrame(a)
df



"""What is the shape of the datafarme <br>
(also, what does it imply?)
"""

# What is the shape of the datafarme
# (also, what does it imply?)


df.shape

"""Hey! remember shape (7,1) implies dataframe has 7 rows and 1 column.

What is the index of the dataframe, is it same as the series 'a'
"""

# yep its same as the series.

df.index

"""print the head and tail of the dataframe. <br>
Additional - (what does head and tali represent?)
"""

df.head()

df.tail()

"""Rename the column of the dataframe as 'points'"""

df.columns = ['points']
df.head()

"""Create another Series 'fruits', which contains random names of fruits from ['orange','mango','apple']. The series should contain 7 elements, randomly selected from ['orange','mango','apple']"""

#Create fruits array

# fruits =
import pandas as pd
import numpy as np

# Define the list of fruits
fruit_list = ['orange', 'mango', 'apple']

# Generate a random list of 7 fruits
random_fruits = np.random.choice(fruit_list, size=7)

# Create the Series
fruits = pd.Series(random_fruits)

print(fruits)

#Create series fruits out of fruits array

# fruits =

# Generate a random list of 7 fruits
random_fruits = np.random.choice(fruit_list, size=7)

# Create the Series
fruits = pd.Series(random_fruits)

print(fruits)

"""Change the index of fruits to the index of dataframe df"""

fruits.index = df.index
fruits

"""Add this fruits series as a new column to the dataframe df with its column name as 'fruits'
<br>print the head of the dataframe to verify
"""

df['fruits'] = fruits
df.head()



"""## Pandas Concatenation

Create a dataframe  d1 where the cols are  ‘city’ : [‘Chandigarh’, ‘Delhi’, ‘Kanpur’, ‘Chennai’, ‘Manali’ ] and ‘Temperature’ : [15, 22, 20, 26,-2]
"""

# d1 =
d1 = pd.DataFrame({'city':['Chandigarh', 'Delhi', 'Kanpur', 'Chennai', 'Manali' ],'Temperature':[15, 22, 20, 26,-2]})
d1

"""Print(d1)"""

d1

"""What is the shape of d1."""

d1.shape

"""Set city = d1['city']"""

city = d1['city']
city

"""print city <br>
What is the type of city.
"""

print(city)
type(city)

"""Create another datafeame 'd2' where the columns are <br>
'city' - ['Bengalaru','Coimbatore','Srirangam','Pondicherry'] <br>
'Temperature' - [24,35,36,39]
"""

# d2 =
d2= pd.DataFrame({'city':['Bengalaru','Coimbatore','Srirangam','Pondicherry'],'Temperature':[24,35,36,39]})
d2

"""print the shape of this dataframe"""

d2.shape

"""merge the two dataframes together, save it in a new dataframe named 'd3'"""

# d3 =

d3 = pd.concat([d1, d2], axis=0)

d3

"""Select the part of the dataframe such that it contains cities wherer temp is less then or equal to 20 <br>
How many cities are there?
"""

city = d3[d3['Temperature'] <= 20]
city.shape
city.head()

"""Select the part of the dataframe such that it contains the cities where tempearature greater than or equal to 35"""

city = d3[d3['Temperature'] >= 35]
city.shape
city.head()

"""## Applying functions to columns and creating new columns

We need to create another column in d3, which contains  a boolean value for each city to indicate whether it's a union territory or not.
- HINT: Chandigarh, Pondicherry and Delhi are only 3 union territories here.
"""

# write function here

def is_ut(x):
    if x in ['Chandigarh', 'Pondicherry', 'Delhi']:
        return True
    else:
        return False

#     # write code below

d3['is_ut'] = d3['city'].apply(is_ut)
d3.head()

# print d3

d3

"""The temperatures mentioned in ‘Temperature’ column are mentioned in Celsius, we need another column which contains the same in Fahrenheit.

HINT -
- Define a function c_to_f which takes input temp in celsius and returns a value with temperature in Fahrenheit.
- To check: c_to_f(10) should return 50.
"""

# write function here
# Step 1: Define the conversion function
def c_to_f(celsius):
    return (celsius * 9/5) + 32

# Step 2: Apply the function to the 'Temperature' column
d3['Fahrenheit'] = d3['Temperature'].apply(c_to_f)

# Step 3: Display the updated DataFrame
d3.head()

# print(c_to_f(10))

# check function c_to_f(10)


print(c_to_f(10))

# apply function c_to_f to d3 to create a column 'temp_farenhiet'

d3['temp_farenhiet'] = d3['Temperature'].apply(c_to_f)
d3

"""## Indexing and selecting rows in DataFrame

Select subset of the dataframe d1 such that it contains the cities which are union territories.
"""

d1[d1['city'].isin(['Chandigarh', 'Pondicherry', 'Delhi'])]

"""Select a subset of the dataframe d1 such that it contains the cities which only have temperature above 90 Farenhiet."""

d3[d3['temp_farenhiet'] > 90]

"""Select only the first three rows of the dataframe d1.

"""

d1.head(3)

"""Select all the rows and last two columns in the dataframe.



"""



"""## Groupby"""

# Create a dataframe using dictionary of your choice

# data =

data= pd.DataFrame({'city':['Chandigarh', 'Delhi', 'Kanpur', 'Chennai', 'Manali' ],'Temperature':[15, 22, 20, 26,-2]})
data.to_csv('city_data.csv')
data

# Use Groupby of single column with aggregate sum()

data.groupby('city').sum()

# Use Groupby of single column with aggregate count()

data.groupby('city').count()

# Use Groupby of single column with aggregate min() and max()

data.groupby('city').min()
data.groupby('city').max()

# Use Groupby of any 2 columns with aggregate mean()


data.groupby(['city','Temperature']).mean()

# Use Groupby of any 2 columns with aggregate min() and max()
data.groupby(['city','Temperature']).min()
data.groupby(['city','Temperature']).max()



"""## Data Range

Create a pandas daterange where starting date is 1st of January,2020 and end date is 1st of April 2021, store it in a new variable named 'a'
"""

# a =

a = pd.date_range(start='2020-01-01', end='2021-04-01')
a

"""print a"""

a

"""What is the len of a?"""

len(a)

"""What is the type of a?"""

type(a)

