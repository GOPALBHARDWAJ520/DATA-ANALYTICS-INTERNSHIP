# -*- coding: utf-8 -*-
"""6. Numpy Basics.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1coyP3IS9trsuG_XU-uMse0xQ8AXUqxOf

# Numpy Array Dimensions

1D Array

2D Array

3D Array
"""

import numpy as np     # importing numpy library

A = np.array(5)        # Scalar Array
A

np.ndim(A)               # Dimension method

One = np.array([1, 2, 3, 4, 5])
Two = np.array([[1, 2, 3], [4, 5, 6]])
Three = np.array([[[1, 2, 3], [4, 5, 6]],
                 [[7, 8, 9], [10, 11, 12]]])

Three

Three.shape
np.ndim(Three)

np.ndim(One)
np.ndim(Two)
np.ndim(Three)





"""# List vs Numpy Array"""

list1 = [1,4.0,'apple']                     # List - Different Datatypes
arr = np.array([1, 2, 3, 4, 5])             # Array - Similar Datatypes

arr

arr = np.array([1, 2, 3.9, 'apple'])        # Type Conversion

arr

arr = np.array([1, 2, 3, 4, 5])             # Allows Mathematical Operations

# arr/5
list1/5



"""# More Advantages of Numpy Array over list

*   Array consumes less memory
*   Array are faster than lists


"""







"""# Reshaping arrays

Reshaping means changing the shape of an array.
"""

arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])   # 1D Array

# 1D to 2D Array
newarr = arr.reshape(3, 4)

print(newarr)

# 1D to 3D Array

newarr = arr.reshape(2, 3, 2)    # x,y,z: x = matrix, y = rows, z = cols

print(newarr)





# print(newarr)





"""# Array Indexing

Array indexing is the same as accessing an array element.

You can access an array element by referring to its index number.
"""

arr = np.array([1, 2, 3, 4])              # Accessing 1D Array

print(arr[3])

print(arr[0] + arr[1])                 # Addition of 2 elements

arr = np.array([[1,2,3,4,5], [6,7,8,9,10]])  # Accessing 2D Array
arr.shape

# print(arr[0, 3])                          # 1st row 4th element
# print(arr[1, 1])                          # 2nd row 5th element
print(arr[1,3])

arr

arr3 = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]])   # Accessing 3D Array

arr3.shape
# print(arr3)
# print(arr3[0, 0, 2])               # 1st matrix, 1st row, 3rd column
# print(arr3[1, 1, 1])               # 1st matrix, 2nd row, 1st column
print(arr3[0,1,0])

print(arr3)

