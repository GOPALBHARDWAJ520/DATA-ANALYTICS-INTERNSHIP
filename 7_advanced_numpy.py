# -*- coding: utf-8 -*-
"""7. Advanced Numpy.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gk_iKBl_kFbSN2okZJ8LJ1MTkb-30q8_

## Slicing arrays
Slicing in python means taking elements from one given index to another given index.

We pass slice instead of index like this: [start:end].

We can also define the step, like this: [start:end:step].
"""

import numpy as np

a1 = np.array([1, 2, 3, 4, 5, 6, 7])             # Slicing 1D Array

print(a1[1:5])     # Slicing                                  # [start:end]
print(a1[4])     # Indexing
a1[:4]

# print(a2)

a2 = np.array([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]])      # Slicing 2D Array

a2[1, 1:4]                                            # [row:column]
a2[0:2, 2]
# a2[1:, :5]

a2.shape

# a3.shape

a3 = np.array([[[10, 11, 12], [13, 14, 15], [16, 17, 18]],
               [[20, 21, 22], [23, 24, 25], [26, 27, 28]],
               [[30, 31, 32], [33, 34, 35], [36, 37, 38]]])           # # Slicing 3D Array

# a3[:2,1:,:2]                                                          # [matrix:row:column]

a3[:2,1:,:]

# a3[:2,1:,:2]





"""# View vs Copy

Copy is a new array, and the View is just a view of the original array.

Any changes made to the **copy** will not affect original array.

Any changes made to the **view** will affect the original array.
"""

arr = np.array([1, 2, 3, 4, 5])

# Copy Method

copy = arr.copy()
copy[0] = 42

print(arr)
print(copy)



# View Method

view = arr.view()
view[0] = 42

print(arr)
print(view)







"""# Append , Insert and Delete Operations"""

a = np.array([[1,2,3],
              [4,5,6]])
a.shape
# Append Method

np.append(a, [7,8,9])
np.append(a, [[7,8,9]],axis = 0)                # axis = 0 = row , axis = 1 = col
np.append(a, [[5],[8]],axis = 1)





a = np.array([[1,2],
              [3,4],
              [5,6]])

# Insert Method

np.insert(a,3,[11,12])
np.insert(a,1,[11,12],axis = 0)
# np.insert(a,1,[11,12,13],axis = 1)





a = np.array([[ 1,  2,  3, 12],
              [ 9,  5,  6,  11],
              [ 8,  4, 10, 7]])

# Delete Method

# np.delete(a,4)
# np.delete(a,1,axis = 1)
np.delete(a,1,axis = 0)

# np.ndim(a)





"""# Hstack vs Vstack

Hstack is used to join two arrays **Horizontally**.

Vstack is used to join two arrays **Vertically**.

"""

import numpy as np

a = np.array([1, 2, 3])
b = np.array([4, 5, 6])

print(a,b)
print(np.ndim(a), np.ndim(b))

# Performing Hstack

result = np.hstack((a,b))

print(result)
print(np.ndim(result))

# Performing Vstack

result = np.vstack((a,b))

print(result, np.ndim(result))







"""# Numpy Concatenation

It is used for joining two or more arrays of the same shape along a specified axis.

Axis = 0, Adding new rows

Axis = 1, Adding new columns

"""

arr1 = np.array([[2, 4], [6, 8]])
arr2 = np.array([[3, 5], [7, 9]])

# print(arr1.shape,arr2.shape)

arr3 = np.array([[3], [9]])
arr4 = np.array([[4] , [8]])

print(arr3.shape,arr4.shape)

new = np.concatenate((arr1, arr2), axis = 0)

# print(new, new.shape)

new = np.concatenate((arr3, arr4), axis = 1)

print(new)



