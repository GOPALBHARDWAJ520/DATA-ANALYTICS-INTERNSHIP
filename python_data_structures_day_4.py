# -*- coding: utf-8 -*-
"""Python Data Structures Day 4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1j-RjVjFhBgywmsS754qe3iTasNKOLNW4

# Tuple
They are used to store multiple items in a single variable.

A tuple is a collection which is ordered and unchangeable.
It is written with round brackets.
"""

fruits = ("apple", "banana", "cherry")                           # Standard Method
print(fruits)

ints = tuple([1,2,3,4,5,9,7,2,0])                                 # Function Method

ints

fruits = ("apple", "banana", "cherry","banana")                  # Allows Duplicates
print(fruits)

# Count() Method

nums = (1, 3, 7, 8, 7, 5, 4, 6, 8, 5)

nums.count(6)

# Index() Method

nums = (1, 3, 7, 8, 7, 5, 4, 6, 8, 5)

nums.index(5)

# Min() & Max() Method

nums = (1, 3, 7, 99, 7, 5, 4, 6, 8, 5)

min(nums)
# max(nums)







"""# Dictionary
Dictionaries are used to store data values in key:value pairs.

A dictionary is a collection which is ordered*, changeable and do not allow duplicates.
"""

car = {"brand": "Ford","model": "Mustang","year": 1964}

# # Get() Method
car.get("year")

# # items() Method
car.items()

# # key() Method
car.keys()

# # values() Method
car.values()

# pop() Method
# car
car.pop("year")
print(car)

# popitem() Method

car.popitem()
print(car)





# update() Method

car.update({"color": "White"})
print(car)

car

# clear() Method

car.clear()
# print(car)

car







"""# Set
Sets are used to store multiple items in a single variable.

Sets are written with curly brackets.
"""

# fruits = {"apple", "banana", "cherry"}

# # add()

# fruits.add("orange")
# print(fruits)

# # pop()

# fruits.pop()
# print(fruits)

# # remove()

# fruits.remove("cherry")
# print(fruits)

type(fruits)



fruits = {"apple", "banana", "cherry"}
company = {"google", "microsoft", "apple"}

# difference()

print(company.difference(fruits))       # Output will be from LHS of dot set only

# intersection()

print(company.intersection(fruits))      # Print common element from both the sets

# union()

print(company.union(fruits))        # Combine both sets together to form new set

# upate()

company.update(fruits)

fruits

company

